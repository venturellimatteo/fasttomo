:py:mod:`FT`
============

.. py:module:: FT


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   FT._Image
   FT._Movie
   FT.Data




.. py:class:: _Image(array)


   .. py:method:: _PIL_conversion()


   .. py:method:: scale(img_min, img_max)


   .. py:method:: show()


   .. py:method:: add_time_text(time)


   .. py:method:: save(path)



.. py:class:: _Movie(path, img_path, exp)


   .. py:method:: write(fps, view)



.. py:class:: Data(exp, parent_folder='/Volumes/T7/Thesis')


   Class used to read and process CT data.

   The Data class is designed for processing and analyzing volumetric image data.
   It provides various functionalities including segmentation, visualization,
   movie creation, 3D model generation, and data analysis.

   :param exp: Experiment name.
   :type exp: str
   :param parent_folder: Path of the parent folder containing the experiments folders.
   :type parent_folder: str, optional

   .. attribute:: exp

      Experiment name.

      :type: str

   .. attribute:: path

      Experiment folder path.

      :type: str

   .. attribute:: ct

      4D CT-scan recorded in (t, z, x, y) format, loaded from ``path/ct.npy'``.

      :type: numpy.ndarray (dtype=np.half)

   .. attribute:: mask

      4D segmentation mask of ``self.ct``. If file ``path/mask.npy`` does not
      exist at the moment of class instantiation, the file is created. The shape
      of the array is the same as ``self.ct``.

      :type: numpy.ndarray (dtype=np.ushort)

   .. attribute:: jellyroll_mask

      4D binary mask of the jellyroll. If file ``path/jellyroll_mask.npy`` does not
      exist at the moment of class instantiation, the file is created. The shape
      of the array is the same as ``self.ct``.

      :type: numpy.ndarray (dtype=np.ushort)

   .. py:method:: _find_biggest_area(smaller_ct, SLICES)


   .. py:method:: _find_threshold()


   .. py:method:: _remove_small_3d_agglomerates(mask)


   .. py:method:: _segment3d()


   .. py:method:: _dictionary_update_condition(current_mask_label, count)


   .. py:method:: _create_label_propagation_map()


   .. py:method:: _propagate()


   .. py:method:: _compute_regionprops()


   .. py:method:: _find_isolated_agglomerates()


   .. py:method:: _find_small_4d_agglomerates(smallest_4Dvolume)


   .. py:method:: _find_pre_TR_agglomerates()


   .. py:method:: _update_labels()


   .. py:method:: _filtering(smallest_4Dvolume, pre_TR_filtering)


   .. py:method:: segment(threshold_target=6800, filtering3D=True, filtering4D=True, pre_TR_filtering=True, smallest_3Dvolume=50, smallest_4Dvolume=250)

      Segment the volumetric data based on specified thresholds and filters.

      :param threshold_target: Description here.
      :type threshold_target: int, optional
      :param filtering3D: Description here.
      :type filtering3D: bool, optional
      :param filtering4D: Description here.
      :type filtering4D: bool, optional
      :param pre_TR_filtering: Description here.
      :type pre_TR_filtering: bool, optional
      :param smallest_3Dvolume: Description here.
      :type smallest_3Dvolume: int, optional
      :param smallest_4Dvolume: Description here.
      :type smallest_4Dvolume: int, optional


   .. py:method:: segment_jellyroll(threshold=1, smallest_3Dvolume=50)

      Description of class method here.

      :param threshold: Description here.
      :type threshold: float, optional
      :param smallest_3Dvolume: Description here.
      :type smallest_3Dvolume: : int, optional


   .. py:method:: view(mask=False, jellyroll_mask=False)

      Display data within Napari interactive viewer, optionally overlaying
      agglomerate segmentation mask or jellyroll mask.

      :param mask: Display mask overlay, by default False.
      :type mask: bool, optional
      :param binary_mask: Display jellyroll mask overlay, by default False.
      :type binary_mask: bool, optional


   .. py:method:: create_slice_movie(z, img_min=0, img_max=5, fps=7)

      Create a movie by slicing through the data at the specified z-level.

      :param z: The z-level at which to slice through the data.
      :type z: int
      :param img_min: Minimum intensity value for image scaling, by default 0.
      :type img_min: int, optional
      :param img_max: Maximum intensity value for image scaling, by default 5.
      :type img_max: int, optional
      :param fps: Frames per second for the movie, by default 7.
      :type fps: int, optional


   .. py:method:: create_render_movie(fps=5, rupture=False)

      Description of class method here.

      :param fps: Frames per second for the movie, by default 5.
      :type fps: int, optional
      :param rupture: Flag to indicate if sidewall rupture is to be considered.
      :type rupture: bool, optional


   .. py:method:: _find_mesh(time, is_binary_mask)


   .. py:method:: _save_stl(label, verts, faces, values, time_path, is_binary_mask)


   .. py:method:: _create_agglomerate_stls(stl_path, rupture, times)


   .. py:method:: _create_sidewall_stls(stl_path, times)


   .. py:method:: create_stls(rupture=False, times=None)

      Description of class method here.

      :param rupture: Description here.
      :type rupture: bool, optional
      :param times: Description here.
      :type times: list, optional


   .. py:method:: _set_constants()


   .. py:method:: _new_df_row(previous_labels, label, V, centroid, t)


   .. py:method:: create_dataframe()

      Description of class method here.




   .. py:method:: _load_df_tot()


   .. py:method:: _load_df_r()


   .. py:method:: _load_df_z()


   .. py:method:: _adjust_axes(axs, time_axis, x_label, draw_legend_title=True)


   .. py:method:: _plot_V_tot(fig, time_axis, palettes, df_tot, df_r, df_z)


   .. py:method:: _plot_V_avg(fig, time_axis, palettes, df_tot, df_r, df_z)


   .. py:method:: _plot_dVdt(fig, time_axis, palettes, df_tot, df_r, df_z)


   .. py:method:: _plot_speed(fig, time_axis, palettes, _dummy1, _dummy2, _dummy3)


   .. py:method:: _plot_density(fig, time_axis, palettes, df_tot, df_r, df_z)


   .. py:method:: plots(save=True)

      Description of class method here.

      :param save: Description here.
      :type save: bool, optional


   .. py:method:: render(rupture=False)

      Description of class method here.

      :param rupture: Description here.
      :type rupture: bool, optional



